Question 1/

La rodata data du slide a une longueur de 48 octects.
Or cette section doit contenir la variable mesg et la chaîne de caractere du printf.
Au minimul il faut qu'on y stocke les 12 caracteres du "Hello World!" le retour chario et le delimiteur de fin de chaine,
soit 15 caracteres. Puis il faut qu'on stocke les 31 caracteres envoyé au printf plus le délimiteur.
On a donc au minimum besoin de 46 octects. En ajoutant de l'offset, l'adressage précedent est compatible avec le slide.
Si on avait fait un "$> objdump -s t.o" on aurait eu :

0000 48656c6c 6f20576f 726c6421 0a000000  Hello World!....
0010 78203d20 25642c20 79203d20 25642c20  x = %d, y = %d, 
0020 7a203d20 25642c20 74203d20 25640a00  z = %d, t = %d..                            


Question 2/

Optimisation -Os

Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00000000  00000000  00000034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00000000  00000000  00000038  2**0
                  ALLOC
  3 .text.startup 0000006c  00000000  00000000  00000038  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  4 .rodata       0000000e  00000000  00000000  000000a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .rodata.str1.1 0000002d  00000000  00000000  000000b2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .comment      0000003b  00000000  00000000  000000df  2**0
                  CONTENTS, READONLY
  7 .ARM.attributes 00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY

Avec l'option Os, le compilateur essaye de minimiser longueur du code genéré.



Optimisation -O0

Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ac  00000000  00000000  00000034  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000004  00000000  00000000  000000e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00000000  00000000  000000e4  2**0
                  ALLOC
  3 .rodata       00000040  00000000  00000000  000000e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000003b  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY
  5 .ARM.attributes 00000030  00000000  00000000  0000015f  2**0
                  CONTENTS, READONLY


Optimisation -O1

Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000074  00000000  00000000  00000034  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000004  00000000  00000000  000000a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00000000  00000000  000000ac  2**0
                  ALLOC
  3 .rodata       00000010  00000000  00000000  000000ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rodata.str1.4 00000030  00000000  00000000  000000bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .comment      0000003b  00000000  00000000  000000ec  2**0
                  CONTENTS, READONLY
  6 .ARM.attributes 00000030  00000000  00000000  00000127  2**0
                  CONTENTS, READONLY


Optimisation -O2

Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00000000  00000000  00000034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00000000  00000000  00000038  2**0
                  ALLOC
  3 .text.startup 00000074  00000000  00000000  00000038  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  4 .rodata       00000010  00000000  00000000  000000ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .rodata.str1.4 00000030  00000000  00000000  000000bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .comment      0000003b  00000000  00000000  000000ec  2**0
                  CONTENTS, READONLY
  7 .ARM.attributes 00000030  00000000  00000000  00000127  2**0
                  CONTENTS, READONLY




Question 3/

static const char mesg[]

Avec l'optimisation Os, le texte "Hello word!" n'est pas dupliqué, il est stocké dans .rodata.str1.1 sans \n
Avec l'optimisation O0, il n'y a aucune différence.
Avec l'optimisation O1, comme pour Os dans .rodata.str1.4
Avec l'optimisation O2, comme pour Os dans .rodata.str1.4

L'une des optimisations activées pour Os, O1 et O2 est -fmerge-constants,
mesg devenant une constante utilisable uniquement dans le fichier t.c,
le compilateur peut fusioner la variable globale et la variable d'affectation immédiate.

source : http://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html

-fipa-reference
    Discover which static variables do not escape the compilation unit. Enabled by default at -O and higher. 

-fmerge-constants
    Attempt to merge identical constants (string constants and floating-point constants) across compilation units.

    This option is the default for optimized compilation if the assembler and linker support it. Use -fno-merge-constants to inhibit this behavior.

    Enabled at levels -O, -O2, -O3, -Os. 


Question 4/

const char *mesg

Avec l'optimisation Os, le texte "Hello word!" n'est pas dupliqué, il est stocké dans .rodata.str1.1 avec \n
Avec l'optimisation O0, comme pour Os dans .rodata
Avec l'optimisation O1, comme pour Os dans .rodata.str1.4
Avec l'optimisation O2, comme pour Os dans .rodata.str1.4

Cette fois la différence dans les séctions n'est pas du à l'optimisation. La variable mesg devient un pointer.
Il n'y pas plus de variable d'affectation immédiate crée puisqu'on fait référence à mesg par son adresse.


const char * const mesg

Avec l'optimisation Os, aucune différence avec la question 2 sauf toute les rodata sont dans .rodata.str1.1.
Avec l'optimisation O0, le texte "Hello word!" n'est pas dupliqué et est stocké dans le .rodata avec \n.
Avec l'optimisation O1, comme pour Os dans .rodata.str1.4
Avec l'optimisation O2, comme pour Os dans .rodata.str1.4